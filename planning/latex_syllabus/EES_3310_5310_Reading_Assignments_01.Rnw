\documentclass{jgassignment}
<<r setup, include=F>>=
library(knitr)
library(RSQLite)
library(dplyr)
library(magrittr)
library(stringr)
library(lubridate)
library(purrr)
@
<<r import_schedule, include=F>>=
# calendar <- read_excel('../../Syllabus/Class Schedule.xlsx', 1)
semester_db <- src_sqlite('../../Syllabus/EES_3310_5310_Class_Schedule.sqlite3')
calendar <- semester_db %>% tbl('calendar') %>% select(-cal_id, -week) %>%
  mutate(date = date(date)) %>%
  arrange(date) %>%
  collect() %>%
  mutate(seq = seq(n()))
reading_assignments <- semester_db %>% tbl('reading_assignments') %>%
  select(topic_id, reading, reading_notes, extra_reading, break_before) %>%
  collect()
reading_assignments <- reading_assignments %>%
  left_join(calendar, by = 'topic_id') %>%
  select(class, date, topic_id, topic, reading, reading_notes, extra_reading, break_before)
notices <- semester_db %>% tbl('notices') %>% select(topic_id, notice) %>%
  collect()
notices <- notices %>%
  left_join(calendar, by = 'topic_id') %>% select(class, date, topic_id, topic, notice)
homework_assignments <- semester_db %>% tbl('homework') %>%
  select(homework_id, short_homework, homework, homework_notes,
         graduate_only, undergraduate_only, break_before) %>%
  collect()
homework_topics <- semester_db %>% tbl('homework_topics') %>%
  collect()
homework_assignments <- homework_assignments %>%
  left_join(homework_topics, by = 'homework_id') %>%
  left_join(calendar, by = 'homework_id') %>%
  select(class, date, homework_id, topic_id, homework_topic, short_homework, homework, homework_notes,
         graduate_only, undergraduate_only, break_before) %>%
  mutate(graduate_only = (graduate_only != 0), undergraduate_only = (undergraduate_only != 0))
calendar <- calendar %>%
  left_join(reading_assignments %>% select(topic_id, reading, reading_notes, extra_reading), by = 'topic_id') %>%
  left_join(homework_assignments %>% select(homework_id, homework, homework_topic), by = 'homework_id') %>%
  left_join(notices %>% select(topic_id, notice), by = 'topic_id') %>%
  mutate(has_reading = ! (is.na(reading) & is.na(reading_notes) & is.na(extra_reading)),
         has_notice = ! is.na(notice), has_homework = ! is.na(homework)) %>%
  select(-reading, -reading_notes, -extra_reading, -notice, -homework) %>%
  group_by_(.dots = names(.)[!str_detect(names(.), '^has')]) %>%
  summarize_all(funs(any(.))) %>%
  ungroup() %>%   distinct() %>%
  mutate(homework_num = cumsum(has_homework))

midsterm <- calendar %>% filter(event_id == 'MIDTERM_TEST') %>% select(class, date, topic, event_id)
thanksgiving <- calendar %>% filter(event_id == 'THANKSGIVING_BREAK') %>% select(date, topic, event_id)
fall_break <- calendar %>% filter(event_id == 'FALL_BREAK') %>% select(date, topic_id, event_id)

select_class <- function(calendar, class_no) {
  class <- calendar %>% filter(class == class_no) %>% select(class, date, topic) %>%
    mutate(weekday = wday(date, label = TRUE), long.weekday = wday(date, label = TRUE, abbr = FALSE),
           month = month(date, label = TRUE), long.month = month(date, label = TRUE, abbr = FALSE),
           day = day(date))
  as.list(class)
}

this_sheet <- 1
this_sheet_revision <- NA
first_class <- 1
last_class <- NA

if(is.na(first_class)) first_class <- min(calendar$class, na.rm = T)
if (is.na(last_class)) last_class <- max(calendar$class, na.rm = T)

first_date <- calendar %>% filter(class == first_class) %>% select(date) %>% unlist()
last_date <- calendar %>% filter(class == last_class) %>% select(date) %>% unlist()

year_taught <- year(first_date)

format_sheet_number <- function() {
  ifelse(is.null(this_sheet_revision), this_sheet,
         paste0(this_sheet, " (", this_sheet_revision, ")"))
}

format_month <- function(d, abbr = TRUE) {
  m <- month(d, label = TRUE, abbr = abbr)
  if (abbr) m <- paste0(m, '.')
  m
}

format_wday <- function(d, abbr = TRUE) {
  wd <- wday(d, label = TRUE, abbr = abbr)
  if (abbr) wd <- paste0(wd, '.')
  wd
}

format_class_date <- function(d, abbr = TRUE) {
  paste0(format_month(d, abbr = abbr), "~", day(d))
}

format_class_day_date <- function(d, abbr_month = TRUE, abbr_wday = TRUE) {
  paste0(format_wday(d, abbr_wday), ", ",
         format_month(d, abbr_month), "~", day(d))
}

format_date_range_by_class_no <- function(calendar, classes, abbr = TRUE) {
  dates <- calendar %>% filter(class %in% na.omit(classes)) %>%
    summarize(start = min(date, na.rm = T), stop = max(date, na.rm = T))
  with(dates, paste0(format_class_date(start, abbr), '--',
         ifelse(month(stop) == month(start), day(stop),
                format_class_date(stop, abbr))))
}

format_date_range_by_topic_id <- function(calendar, topics, abbr = TRUE) {
  dates <- calendar %>% filter(topic_id %in% topics) %>%
    summarize(start = min(date, na.rm = T), stop = max(date, na.rm = T))
  with(dates, paste0(format_class_date(start, abbr), '--',
         ifelse(month(stop) == month(start), day(stop),
                format_class_date(stop, abbr))))
}

format_date_range_by_event_id <- function(calendar, event_ids, abbr = TRUE) {
  dates <- calendar %>% filter(event_id %in% event_ids) %>%
    select(date) %>% summarize(start = min(date, na.rm = T), stop = max(date, na.rm = T))
  with(dates, {
    output <- format_class_date(start, abbr)
    if (start != stop) {
      output <- paste0(output, '--',
                       ifelse(month(stop) == month(start), day(stop),
                              format_class_date(stop, abbr)))
    }
  output})
}

format_day_date_range_by_event_id <- function(calendar, event_ids, abbr_month = TRUE, abbr_wday = TRUE) {
  dates <- calendar %>% filter(event_id %in% event_ids) %>%
    select(date) %>% summarize(start = min(date, na.rm = T), stop = max(date, na.rm = T))
  with(dates, {
    output <- format_class_day_date(start, abbr_month, abbr_wday)
    if (start != stop) {
      output <- paste0(output, '--',
                       format_class_day_date(stop, abbr_wday))
    }
  output})
}


append_newline_if_needed <- function(txt) {
  txt <- str_trim(txt)
  txt[str_detect(txt, '[^\n]$')] <- str_c(txt, '\n')
  txt
}

make_section <- function(cal_entry) {
  d <- cal_entry$date
  paste0('\\section[',
         format_class_date(d, abbr = TRUE),
         ']{',
         format_class_day_date(d, TRUE, TRUE),
         ': ',
         cal_entry$topic,
         '}\n')
}

make_reading_assignment <- function(reading_entry) {
  output <- '\\subsection{Reading}'
  if (is.na(reading_entry$reading)) {
    output <- paste(str_trim(output),
                   'No new reading for today.',
                   '', sep = '\n')
  } else {
    output <- paste(str_trim(output),
                   '\\begin{itemize}',
                   str_trim(reading_entry$reading),
                   '\\end{itemize}',
                   '', sep = '\n')
  }
    if (! is.na(reading_entry$extra_reading)) {
    output <- paste(str_trim(output),
                    '\\subsection{Optional Extra Reading}',
                    '\\begin{itemize}',
                    append_newline_if_needed(reading_entry$extra_reading),
                    '\\end{itemize}',
                    '', sep = '\n'
    )
  }
  if (! is.na(reading_entry$reading_notes)) {
    output <- with(reading_entry,
                   paste(str_trim(output), '',
                    ifelse(is.na(reading) & is.na(extra_reading),
                           '\\subsection{Notes}',
                           '\\subsection{Reading Notes}'),
                    str_trim(reading_notes),
                    '', sep = '\n'))
  }
  output
}

make_homework_assignment <- function(homework_entries) {
  grad_hw <- homework_entries %>% filter(graduate_only & ! is.na(homework))
  ugrad_hw <- homework_entries %>% filter(undergraduate_only & ! is.na(homework))
  everyone_hw <- homework_entries %>% filter(!graduate_only & ! undergraduate_only & ! is.na(homework))
  grad_notes <- homework_entries %>% filter(graduate_only & ! is.na(homework_notes))
  ugrad_notes <- homework_entries %>% filter(undergraduate_only & ! is.na(homework_notes))
  everyone_notes <- homework_entries %>% filter(!graduate_only & ! undergraduate_only & ! is.na(homework_notes))
  output <- paste('\\subsection{Homework}',
         'A the beginning of class today, turn in the following homework:',
         '\\begin{itemize}',
         '', sep = '\n')
    if (nrow(ugrad_hw) > 0) {
      output <- paste(str_trim(output),
                       str_c('\\item \\textbf{Undergraduate Students:} ',
                             str_trim(ugrad_hw$homework)),
                      '', sep = '\n')
    }
    if (nrow(grad_hw) > 0) {
      output <- paste(str_trim(output),
                       str_c('\\item \\textbf{Graduate Students:} ',
                             str_trim(grad_hw$homework)),
                      '', sep = '\n')
    }
    if (nrow(everyone_hw) > 0) {
      output <- paste0(str_trim(output),
                       str_c('\\item \\textbf{Everyone:} ',
                             str_trim(everyone_hw$homework)),
                       '', sep = '\n')
    }
    output <- paste(str_trim(output),
                    '\\end{itemize}',
                    '', sep = '\n')

    if (nrow(grad_notes) > 0 || nrow(ugrad_notes) > 0 || nrow(everyone_notes) > 0) {
      output <- paste(str_trim(output),
                      '\\subsection{Notes on Homework}\n',
                      '', sep = '\n')
      if (nrow(everyone_notes) > 0) {
        output <- paste(str_trim(output),
                        str_trim(everyone_notes$homework_notes),
                        '', sep = '\n')
      }
      if (nrow(grad_notes) > 0 || nrow(ugrad_notes) > 0) {
        output <- paste(str_trim(output),
                        '\\begin{itemize}',
                        '', sep = '\n')
        if (nrow(ugrad_notes) > 0) {
          output <- paste(str_trim(output),
                          str_c('\\item \\textbf{Undergraduate Students:} ',
                                str_trim(ugrad_notes$homework_notes)),
                          '', sep = '\n')
        }
        if (nrow(grad_notes) > 0) {
          output <- paste(str_trim(output),
                          str_c('\\item \\textbf{Graduate Students:} ',
                                str_trim(grad_notes$homework_notes)),
                          '', sep = '\n')
        }

        output <- paste(str_trim(output),
                        '\\end{itemize}',
                        '', sep = '\n')
      }
    }
    output
}

make_hw_section <- function(cal_entry) {
  d <- cal_entry$date
  paste0('\\section[',
         format_class_date(d, abbr = TRUE),
         ']{',
         format_class_day_date(d, TRUE, TRUE),
         ': ',
         paste0('Homework \\#', cal_entry$homework_num, ': ', cal_entry$homework_topic),
         '}\n')
}

make_short_hw_assignment <- function(cal_entry) {
  d <- cal_entry$date
  paste( "\\subsection{Homework}",
         paste0( "Homework \\#", cal_entry$homework_num, ": ", cal_entry$homework_topic,
                " is due today.  See the homework assignment sheet for details."),
         '', sep = '\n' )
}


make_notice <- function(notice_entries) {
  if (length(notice_entries) > 1) {
    output <- paste('\\subsection{Notices:}',
                    '\\begin{itemize}',
                    paste('\\item', notice_entries$notice,
                          sep = ' ', collapse = '\n'),
                    '\\end{itemize}',
                    '', sep = '\n')
  } else {
    output <- paste('\\subsection{Notice:}',
                    notice_entries$notice,
                    '', sep = '\n')
  }
  output
}

format_assignment_entry <- function(class_no) {
  cal_entry <- calendar %>% filter(class == class_no)
  hw_entry <- homework_assignments %>% filter(class == class_no)

  if (cal_entry$has_homework) {
    output <- paste(str_trim(output),
                    make_homework_assignment(hw_entry),
                    '', sep = '\n')
  }
  knit_expand(text = output, this_class_no = class_no,
              this_class_date = cal_entry$date,
              calendar = calendar,
              delim = c('<%','%>'))
}


format_class_entry <- function(class_no) {
  cal_entry <- calendar %>% filter(class == class_no)
  hw_entry <- homework_assignments %>% filter(class == class_no)
  reading_entry <- reading_assignments %>% filter(class == class_no)
  notice_entry <- notices %>% filter(class == class_no)

  output <- ''
  if (any(reading_entry$break_before)) {
    output <- paste(str_trim(output),
                    '',
                    '\\clearpage',
                    '', sep = '\n')
  }

  output <- paste(str_trim(output),
                  make_section(cal_entry),
                  '', sep = '\n')
  if (cal_entry$has_notice) {
    output <- paste(str_trim(output),
                    make_notice(notice_entry),
                    '', sep = '\n')
  }
  if (cal_entry$has_homework) {
    if(FALSE) {
      output <- paste(str_trim(output),
                      make_homework_assignment(hw_entry),
                      '', sep = '\n')
    } else {
      output <- paste(str_trim(output),
                      make_short_hw_assignment(cal_entry),
                      '', sep = '\n')
    }
  }
  if (cal_entry$has_reading) {
    output <-paste(str_trim(output),
                   make_reading_assignment(reading_entry),
                   '', sep = '\n')
  } else {
    # output <- paste0(str_trim(output),
    #                  '\\subsection{Reading}',
    #                  'No new reading for today.',
    #                  '', sep = '\n')
  }
  knit_expand(text = output, this_class_no = class_no,
              this_class_date = cal_entry$date,
              calendar = calendar,
              delim = c('<%','%>'))
}

@

\SheetNumber{\Sexpr{this_sheet}}
<<r set_revision_date, echo=FALSE, results='asis'>>=
output <-   '\\setboolean{revised}{false}'
if(! is.na(this_sheet_revision)) {
  output <- paste0('\\setboolean{revised}{true}
\\newcommand{\\RevisionDate}{', this_sheet_revision$date)
}
cat(output)
@
\DueDate{\Sexpr{format_date_range_by_class_no(calendar, c(first_class, last_class))}, \YearTaught}
\iffalse
\include{CourseInfo.tex}
\fi

\newcommand{\MODTRAN}{\textsf{\bfseries MODTRAN}}
\newcommand{\RRTM}{\textsf{\bfseries RRTM}}
\newcommand{\SLUGULATOR}{\textsf{\bfseries SLUGULATOR}}
\newcommand{\GEOCARB}{\textsf{\bfseries GEOCARB}}

\SetupHandout[Reading]

\ifthenelse{\boolean{revised}}{%
\title{Reading Assignment Sheet \#\thesheetnumber\\
    Revised~\RevisionDate}%
}{%
\title{Reading Assignment Sheet \#\Sexpr{this_sheet}}%
}%
\date{Reading
%and Homework
for \duedate}

\begin{document}
\maketitle
\thispagestyle{empty}
\section{Disclaimer}
This is a schedule of reading
%and homework
assignments through the entire term. I have worked hard to plan the semester, but I may need to deviate from this schedule, either because I decide that it's important to spend more time on some subjects, or because new developments in either climate science or climate policy require us to depart from my plans to discuss current events and breaking news.
\section{Ground Rules}
\begin{itemize}
\item Do the assigned reading \emph{before\/} you come to class on the date for which it is assigned. If you have questions or find the ideas presented in the readings confusing, I encourage you to ask questions in class.
\item Questions in the ``Reading Notes'' sections of the assignments are for you to think about to make sure you understand the material, but you do not have to write up your answers or turn them in. On tests, you are responsible for all the assigned readings, but topics I have highlighted in the reading notes are particularly important.
\item In addition to the questions I ask in the reading notes, look over the ``study questions'' at the end of each chapter in \emph{\MedArcher\/} to check whether you understand the key facts and concepts from the chapter.


Don't get confused between the \textbf{Study Questions} and the \textbf{Exercises} at the end of the chapter: Study Questions are for your own use in reviewing whether you understand the chapter, and the answers generally appear in the text, so if you don't know the answer, look back at the chapter. My homework assignments ask you to do the Exercises, which are more challenging and ask you to apply the concepts from the chapter.
\iffalse
\item Homework is due at the beginning of class on the due date. Late homework will be accepted for half-credit until I post the answers on Blackboard (usually a week after the due date).
% \item In the ``upcoming homework'' section of the assignments, I give reminders of upcoming assignments.
\item I encourage you to discuss homework assignments with your classmates. It is fine to work together on homework assignments, but you must actually do the work yourself. This means that you can ask a classmate to explain how they solved a problem but you have to go through the steps independently and put the answer in your own words, not simply copy someone else's work.
\textbf{It is a violation of the honor code to turn in homework that someone else has done for you or which you copied from someone else.}
\item When you turn in homework, be sure to put your name, the course (``{\scshape EES~2110}'' or ``{\scshape EES~5110}''), and the date at the top of the first page. Separate sheets must be stapled together. I do not bring a stapler to class, so you are responsible for this. It is a good idea to put your name on top of every sheet in case the sheets tear apart.
\fi
\end{itemize}
%
% Class #2
%
<<r classes, echo=F, results='asis'>>=
skip_event <- NULL
for(i in sort(calendar$seq)) {
  output <- ''
  this_class <- calendar %>% filter(seq == i)
  if (! is.na(this_class$class) && this_class$class > 0) {
    output <- paste0(output, format_class_entry(this_class$class))
  } else {
    if (! is.na(this_class$event_id)) {
      # message('EVENT = ', this_class$event_id)
      if (is.null(skip_event) || skip_event != this_class$event_id) {
        skip_event <- this_class$event_id
        if (str_detect(this_class$event_id, fixed('Break', ignore_case = TRUE))) {
          output <- paste(str_trim(output),
                          str_trim(paste0(
                            '\\section[',
                            format_date_range_by_event_id(calendar, this_class$event_id),
                            ']{',
                            format_day_date_range_by_event_id(calendar, this_class$event_id),
                            ': ', this_class$topic)),
                          '}',
                          paste0(this_class$topic, ". No class. Enjoy yourselves."),
                          '', sep = '\n')
        }
      }
    } else {
      skip_event <- NULL
    }
  }
  if (output != '') cat(output, '\n')
}
@
%
%
%
\end{document}
